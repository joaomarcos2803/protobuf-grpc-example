# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stock_pb2 as stock__pb2


class StockServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StockMessage = channel.unary_unary(
                '/StockService/StockMessage',
                request_serializer=stock__pb2.StockRequest.SerializeToString,
                response_deserializer=stock__pb2.StockResponse.FromString,
                )
        self.TotalPriceFunction = channel.unary_unary(
                '/StockService/TotalPriceFunction',
                request_serializer=stock__pb2.StockRequest.SerializeToString,
                response_deserializer=stock__pb2.FunctionResponse.FromString,
                )
        self.TotalPriceFunctionClientStreaming = channel.stream_unary(
                '/StockService/TotalPriceFunctionClientStreaming',
                request_serializer=stock__pb2.StockRequest.SerializeToString,
                response_deserializer=stock__pb2.FunctionResponse.FromString,
                )
        self.TotalPriceFunctionServerStreaming = channel.unary_stream(
                '/StockService/TotalPriceFunctionServerStreaming',
                request_serializer=stock__pb2.StockRequest.SerializeToString,
                response_deserializer=stock__pb2.FunctionResponse.FromString,
                )
        self.TotalPriceFunctionBiDirectionalStreaming = channel.stream_stream(
                '/StockService/TotalPriceFunctionBiDirectionalStreaming',
                request_serializer=stock__pb2.StockRequest.SerializeToString,
                response_deserializer=stock__pb2.FunctionResponse.FromString,
                )
        self.TotalPriceFile = channel.unary_unary(
                '/StockService/TotalPriceFile',
                request_serializer=stock__pb2.FileRequest.SerializeToString,
                response_deserializer=stock__pb2.FileResponse.FromString,
                )


class StockServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StockMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalPriceFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalPriceFunctionClientStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalPriceFunctionServerStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalPriceFunctionBiDirectionalStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalPriceFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StockMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.StockMessage,
                    request_deserializer=stock__pb2.StockRequest.FromString,
                    response_serializer=stock__pb2.StockResponse.SerializeToString,
            ),
            'TotalPriceFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.TotalPriceFunction,
                    request_deserializer=stock__pb2.StockRequest.FromString,
                    response_serializer=stock__pb2.FunctionResponse.SerializeToString,
            ),
            'TotalPriceFunctionClientStreaming': grpc.stream_unary_rpc_method_handler(
                    servicer.TotalPriceFunctionClientStreaming,
                    request_deserializer=stock__pb2.StockRequest.FromString,
                    response_serializer=stock__pb2.FunctionResponse.SerializeToString,
            ),
            'TotalPriceFunctionServerStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.TotalPriceFunctionServerStreaming,
                    request_deserializer=stock__pb2.StockRequest.FromString,
                    response_serializer=stock__pb2.FunctionResponse.SerializeToString,
            ),
            'TotalPriceFunctionBiDirectionalStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.TotalPriceFunctionBiDirectionalStreaming,
                    request_deserializer=stock__pb2.StockRequest.FromString,
                    response_serializer=stock__pb2.FunctionResponse.SerializeToString,
            ),
            'TotalPriceFile': grpc.unary_unary_rpc_method_handler(
                    servicer.TotalPriceFile,
                    request_deserializer=stock__pb2.FileRequest.FromString,
                    response_serializer=stock__pb2.FileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StockService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StockMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockService/StockMessage',
            stock__pb2.StockRequest.SerializeToString,
            stock__pb2.StockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalPriceFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockService/TotalPriceFunction',
            stock__pb2.StockRequest.SerializeToString,
            stock__pb2.FunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalPriceFunctionClientStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/StockService/TotalPriceFunctionClientStreaming',
            stock__pb2.StockRequest.SerializeToString,
            stock__pb2.FunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalPriceFunctionServerStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/StockService/TotalPriceFunctionServerStreaming',
            stock__pb2.StockRequest.SerializeToString,
            stock__pb2.FunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalPriceFunctionBiDirectionalStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/StockService/TotalPriceFunctionBiDirectionalStreaming',
            stock__pb2.StockRequest.SerializeToString,
            stock__pb2.FunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalPriceFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockService/TotalPriceFile',
            stock__pb2.FileRequest.SerializeToString,
            stock__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
